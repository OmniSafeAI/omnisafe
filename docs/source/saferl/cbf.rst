Control Barrier Functions Methods
=================================

Quick Facts
-----------

.. card::
    :class-card: sd-outline-info  sd-rounded-1
    :class-body: sd-font-weight-bold

    #. Control Barrier Functions (CBF) method maps :bdg-danger-line:`unsafe` actions to :bdg-info-line:`safe` actions.
    #. CBF method is highly :bdg-info-line:`coupled` with the environment.
    #. Currently, OmniSafe provides implementations for four algorithms: *DDPGCBF*, *TRPOCBF*, *SACRCBF*, and *CRABS*
    #. Here we introduce the :bdg-info-line:`interface` to extend the CBF method to :bdg-info-line:`custom environments`.

Introduction
------------

This section will introduce the implementation framework of OmniSafe using the DDPGCBF from the classic CBF method: `End-to-End Safe Reinforcement Learning through Barrier Functions for Safety-Critical Continuous Control Tasks <https://arxiv.org/pdf/1903.08792>`_ as an example.

The CBF method implementation in OmniSafe revolves around the ``Adapter``, which decouples and integrates the two core components: ``dynamics model`` and ``solver``. The former predicts the dynamic changes of the environment, while the latter maps the current action to a safe space based on the given environment dynamics.

CBF Adapter
-----------

.. currentmodule:: omnisafe.adapter

.. card::
    :class-header: sd-bg-success sd-text-white
    :class-card: sd-outline-success  sd-rounded-1

    Documentation
    ^^^

    .. autoclass:: OffPolicyBarrierFunctionAdapter
        :members:

Core Components
---------------

Dynamics Model
""""""""""""""

The environmental dynamic model of the CBF method needs to be designed for a specific environment. For example, in the case of the ``Pendulum-v1`` environment, the environmental dynamics will be calculated together with variables such as mass and gravitational acceleration.

.. code-block:: python
    :linenos:

    def get_dynamics(self, obs: list[float], original_action: float) -> np.ndarray:
        dt = 0.05
        # gravitational constant
        G = 10
        # mass
        m = 2
        # length
        length = 2
        # calculate the angle
        theta = np.arctan2(obs[1], obs[0])
        # angular velocity
        theta_dot = obs[2]
        # dynamics equations
        f = np.array(
            [
                -3 * G / (2 * length) * np.sin(theta + np.pi) * dt**2
                + theta_dot * dt
                + theta
                + 3 / (m * length**2) * original_action * dt**2,
                theta_dot
                - 3 * G / (2 * length) * np.sin(theta + np.pi) * dt
                + 3 / (m * length**2) * original_action * dt,
            ],
        )
        return np.squeeze(f)

The current mainstream implementation often uses a combination of several Gaussian Process (GP) models to fit the environmental dynamics. The specific code documentation is as follows:

.. currentmodule:: omnisafe.common

.. card::
    :class-header: sd-bg-success sd-text-white
    :class-card: sd-outline-success  sd-rounded-1

    Documentation
    ^^^

    .. autoclass:: DynamicsModel
        :members:
        :private-members:

The ``solver`` is responsible for taking the feedback information from the ``dynamics model`` and mapping the often unsafe actions generated by the agent into a safe one.

CBF Solver
""""""""""

.. currentmodule:: omnisafe.common

.. card::
    :class-header: sd-bg-success sd-text-white
    :class-card: sd-outline-success  sd-rounded-1

    Documentation
    ^^^

    .. autoclass:: PendulumSolver
        :members:
        :private-members:

Architecture of methods
"""""""""""""""""""""""

-  ``DDPGCBF.learn()``

   - ``DDPGCBF._env.rollout()``

     - ``DDPGCBF._env.get_safe_action()``

       - ``DDPGCBF._env.dynamics_model.get_gp_dynamics()``
       - ``DDPGCBF._env.solver.control_barrier()``

     - ``DDPGCBF._env.dynamics_model.update_gp_dynamics()``

   - ``DDPGCBF._update()``


Further Discussion
""""""""""""""""""

For details on the implementation, performance, reproducible scripts, and related discussions of algorithms including DDPGCBF, please refer to: https://github.com/PKU-Alignment/omnisafe/pull/323


References
----------

-  `End-to-End Safe Reinforcement Learning through Barrier Functions for Safety-Critical Continuous Control Tasks <https://arxiv.org/pdf/1903.08792>`__
-  `Safe Reinforcement Learning Using Robust Control Barrier Functions <https://arxiv.org/pdf/2110.05415>`__
-  `Learning Barrier Certificates: Towards Safe Reinforcement Learning with Zero Training-time Violations <https://arxiv.org/pdf/2108.01846>`__

# Copyright 2023 OmniSafe Team. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

defaults:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cuda:0
    # number of threads for torch
    torch_threads: 16
    # total number of steps to train
    total_steps: 1000000
    # dataset name
    dataset: SafetyPointCircle1-v0-mixed-beta0.5
    # evaluate_epoisodes
    evaluate_epoisodes: 2
    # parallel, offline only supports 1
    parallel: 1
    # vector_env_nums, offline only supports 1
    vector_env_nums: 1
    # algorithm configurations
    #    n_steps_per_epoch: 10000
    loss_type: 'l2'
    #    n_train_steps: 1000000
    #    batch_size: 32
    gradient_accumulate_every: 2

  algo_cfgs:
    # gamma used in RL
    gamma: 0.99
    # batch size
    batch_size: 32
    # step per epoch, algo will log and eval every epoch
    steps_per_epoch: 50

    model: 'models.TemporalUnet'

    diffusion: 'models.GaussianInvDynDiffusion'

    horizon: 100

    n_diffusion_steps: 200
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 1
    # save logger path
    log_dir: "./runs"
  # model configurations
  model_cfgs:
    # The mode to initiate the weight of network, choosing from "kaiming_uniform", "xavier_normal", "glorot" and "orthogonal".
    weight_initialization_mode: "kaiming_uniform"

    returns_condition: True

    lr: 0.0002

    diffuser_model:

      ar_inv: False

      train_only_inv: False

      action_weight: 10

      loss_weights: None

      loss_discount: 1

      predict_epsilon: True

      test_ret: 0.9

      hidden_dim: 256

      clip_denoised: True

      condition_guidance_w: 1.2

    temporalU_model:

      dim_mults: [ 1, 4, 8 ]

      calc_energy: False

      dim: 128

      condition_dropout: 0.25

  dataset_cfgs:

    use_padding: True

    include_returns: True

    returns_scale: 10.0 # Determined using rewards from the dataset
